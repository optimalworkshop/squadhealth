// sass-lint:disable zero-unit

// Shadow colors.
// http://codepen.io/shyndman/pen/ojxmdY

$key-umbra: rgba(0, 0, 0, 0.2);
$key-penumbra: rgba(0, 0, 0, 0.14);
$ambient: rgba(0, 0, 0, 0.12);
$transparent: rgba(0, 0, 0, 0);

// The hand-designed reference shadow sets.
// Source: http://codepen.io/shyndman/pen/ojxmdY

$reference-shadows: (
  (
    elevation: 0,
    shadows: (
      (0, 0, 0, 0, $key-umbra),
      (0, 0, 0, 0, $key-penumbra),
      (0, 0, 0, 0, $ambient),
    ),
  ),
  (
    elevation: 2,
    shadows: (
      (0, 3, 1, -2, $key-umbra),
      (0, 2, 2, 0, $key-penumbra),
      (0, 1, 5, 0, $ambient),
    ),
  ),
  (
    elevation: 3,
    shadows: (
      (0, 3, 3, -2, $key-umbra),
      (0, 3, 4, 0, $key-penumbra),
      (0, 1, 8, 0, $ambient),
    ),
  ),
  (
    elevation: 4,
    shadows: (
      (0, 2, 4, -1, $key-umbra),
      (0, 4, 5, 0, $key-penumbra),
      (0, 1, 10, 0, $ambient),
    ),
  ),
  (
    elevation: 6,
    shadows: (
      (0, 3, 5, -1, $key-umbra),
      (0, 6, 10, 0, $key-penumbra),
      (0, 1, 18, 0, $ambient),
    ),
  ),
  (
    elevation: 8,
    shadows: (
      (0, 5, 5, -3, $key-umbra),
      (0, 8, 10, 1, $key-penumbra),
      (0, 3, 14, 2, $ambient),
    ),
  ),
  (
    elevation: 16,
    shadows: (
      (0, 8, 10, -5, $key-umbra),
      (0, 16, 24, 2, $key-penumbra),
      (0, 6, 30, 5, $ambient),
    ),
  )
);

// Returns the two reference shadows whose elevations bound the specified
// elevation. In the case where the supplied elevation exceeds the maximum
// reference elevation, the last two reference shadows are returned.

@function find-bounding-shadow-sets($elevation) {
  @if $elevation < 0 {
    @warn "Elevation is less than zero";
  }
  @for $i from 1 to length($reference-shadows) {
    $lower: nth($reference-shadows, $i);
    $upper: nth($reference-shadows, $i + 1);
    @if (map-get($lower, "elevation") <=$elevation) and (map-get($upper, "elevation") > $elevation) {
      @return ($lower, $upper);
    }
  }
  $lower: nth($reference-shadows, length($reference-shadows) - 1);
  $upper: nth($reference-shadows, length($reference-shadows));
  @return ($lower, $upper);
}

// Performs linear interpolation between values a and b. Returns the value
// between a and b proportional to x (when x is between 0 and 1. When x is
// outside this range, the return value is a linear extrapolation).

@function lerp($x, $a, $b) {
  @return $a + $x * ($b - $a);
}

// Performs linear interpolation between shadows by interpolating each property
// individually. Returns the value between shadow1 and shadow2 proportional to x
// (when x is between 0 and 1. When x is outside this range, the return value is
// a linear extrapolation).

@function lerp-shadow($x, $shadow1, $shadow2) {
  // Round all parameters, as shadow definitions do not support subpixels
  $new-x: round(lerp($x, nth($shadow1, 1), nth($shadow2, 1))) + 0px;
  $new-y: round(lerp($x, nth($shadow1, 2), nth($shadow2, 2))) + 0px;
  $new-blur: round(lerp($x, nth($shadow1, 3), nth($shadow2, 3))) + 0px;
  $new-spread: round(lerp($x, nth($shadow1, 4), nth($shadow2, 4))) + 0px;
  $new-color: nth($shadow1, 5); // No need to lerp the shadow color
  @return ($new-x $new-y $new-blur $new-spread $new-color);
}

// Calculates the set of shadows at a given elevation.

@function elevation-shadow($elevation) {
  @if (not $elevation) {
    @return none;
  }

  $bounds: find-bounding-shadow-sets($elevation);
  $min: nth($bounds, 1);
  $max: nth($bounds, 2);
  $x: ($elevation - map-get($min, "elevation")) / (map-get($max, "elevation") - map-get($min, "elevation"));
  $elevation-shadows: ();
  @for $i from 1 to length(map-get($min, "shadows")) + 1 {
    $new-shadow: lerp-shadow($x, nth(map-get($min, "shadows"), $i), nth(map-get($max, "shadows"), $i));
    $elevation-shadows: append($elevation-shadows, $new-shadow, comma);
  }
  @return $elevation-shadows;
}

@mixin shadow($elevation) {
  box-shadow: elevation-shadow($elevation);
}
